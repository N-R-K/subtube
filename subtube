#!/bin/bash

PREFIX=/usr/share/subtube/resources

# list of seen video hashes
SEEN=$PREFIX/seen.lst

# storage of data regarding subscribed channels
SUBSCRIBES=$PREFIX/subscribes

# icons
PLAYING_ICON=$PREFIX/subtube-playing.png
YOUTUBE_ICON=$PREFIX/subtube_youtube.png

# location of thumbnails
THUMBNAILS=$PREFIX/thumbnails

# variables for XOB (progress bar)
fifo=/tmp/subtube.fifo
progressbar_pid=-1


add_subscriber(){
    echo $1 >> $SUBSCRIBES
}

metadata(){
    id=$(echo "$2" | sed "s/.*\/// ; s/\.jpg//")
    url="https://www.youtube.com/watch?v=$id"
    TITLE=$(youtube-dl -e "$url")

    [[ $1 == "name" ]] && notify-send -i $2 "$TITLE" && exit 0
    duration=$(youtube-dl --get-duration $url)
    notify-send -i $2 "$TITLE" "$duration"
}

update(){
    # internet verification
    wget -q --spider http://google.com
    if [[ $? -gt 0 ]]; then
        notify-send -t 4000 -i 'none' -u critical "Subtube" "No internet connection"
        exit 1
    fi
    # avoid running twice at the same time
    if [[ -f /tmp/subtube_update.pid ]]; then
        notify-send -i 'none' -u critical -t 2000 "Subtube" "Update already in progress, wait..."
        exit 0
    else
        touch /tmp/subtube_update.pid
    fi

    # initialize progress bar (xob)
    [[ $1 != "secret" ]] && progress_bar -d

    # init loop variables
    sub_i=0
    subcount=$(cat $SUBSCRIBES | wc -l)

    # loop over subscribed urls
    while read line; do
        sub_i=$((sub_i+1))

        # notify progress
        [[ $1 != "secret" ]] && progress_bar $sub_i $subcount 30

        # get first 10 video hashes parsed from youtube video page
        vid_ids=$(curl -s $line \
            | grep ytInitialData \
            | head -n 1 \
            | sed 's/;$// ; s/window\["ytInitialData"\]\s*=\s*// ; s/.*var ytInitialData = //' \
            | jq -r ".contents\
            .twoColumnBrowseResultsRenderer\
            .tabs[1]\
            .tabRenderer\
            .content\
            .sectionListRenderer\
            .contents[0]\
            .itemSectionRenderer\
            .contents[0]\
            .gridRenderer\
            .items\
            | .[].gridVideoRenderer.videoId" \
            2> /dev/null \
            | head)

        # loop over hashes
        while read vid_id; do

            # filter out already seen ones
            [[ ! -z $(grep -e "^$vid_id$" $SEEN) ]] && continue

            # if problem occured during parsing 
            [[ -z "$vid_id" ]] && echo "error parsing given url: $line" && continue

            [[ $1 != "init" ]] && get_thumbnail $vid_id
            echo $vid_id >> $SEEN
            [[ $1 == "init" ]] && continue

            # get video metadata
            url="https://www.youtube.com/watch?v=$vid_id"
            title=$(youtube-dl -e $url)
            duration=$(youtube-dl --get-duration $url)

            notify-send -i 'none' -t 3000 "$title" "$duration" -u critical -i $THUMBNAILS/$vid_id.jpg
        done <<< "$vid_ids"


    done < $SUBSCRIBES

    # kill progress bar
    if [[ $1 != "secret" ]]; then
        notify-send -i 'none' -t 3000 "Subtube" "$(find $THUMBNAILS/* | wc -l) unseen video(s)"
        progress_bar -k
    fi

    # update finished, remove update flag
    rm /tmp/subtube_update.pid
}

# 1st argument: thumbnails folder
# 2st argument: play with browser
play(){
    # this parts serves as override of THUMBNAILS folder
    thumbnails=$THUMBNAILS
    [ ! -z "$1" ] \
        && thumbnails=$1

    chosen=$(sxiv -tbo $thumbnails || notify-send -i 'none' -t 3000 "Subtube" "No videos to play")

    if [[ -z $chosen ]]; then
        [[ -z $1 ]] \
            && exit \
            || return
    fi

    count=$(echo "$chosen" | wc -l)
    i=1
    while read choice; do
        # first move it so that its 'removed' instantly
        file_name=$(basename $choice)
        mv $choice "/tmp/$file_name"
        choice="/tmp/$file_name"

        # get video hash
        id=$(echo "$choice" | sed "s/.*\/// ; s/\.jpg//")
        if [[ $count -eq 1 ]]; then
            notify_name "Playing" $id $choice
        else
            notify_name "Playing $i/$count" $id $choice
            i=$((i+1))
        fi
        rm $choice

        url="https://www.youtube.com/watch?v=$id"
        TITLE=$(youtube-dl -e "$url")

        # integration with mpv_history, script of mine storing every seen video
        [[ -f ~/.local/share/qutebrowser/mpv_history ]] && echo "$TITLE($url)" >> ~/.local/share/qutebrowser/mpv_history

        if [ $2 == "browser" ]; then
            if [ -z "${BROWSER+x}" ]; then
                for browser in \
                    chromium \
                    chrome \
                    google-chrome-stable \
                    google-chrome-unstable \
                    google-chrome-beta \
                    firefox \
                    firefox-nightly
                do
                    command -v $browser >/dev/null 2>&1 \
                        && echo "playing with $browser" \
                        && $browser "$url" \
                        && break
                done
            else
                $BROWSER "$url"
            fi
        else
            # try to play it until it works (maximum 3 times)
            # mpv has youtube-dl hook and sometimes it work on second try
            # if 3 times is not enough, you probably just need to update your 
            # local youtube-dl (python -m pip install --upgrade youtube-dl)
            n=0
            until [ "$n" -ge 3 ]
            do
                [[ "$n" -ge 1 ]] && notify-send -t 1000 "MPV" "retry $n"
                mpv "$url" &> /dev/null && break
                n=$((n+1)) 
                sleep 2
            done
        fi
    done <<< "$chosen"
}

notify_name(){
    title=$(youtube-dl -e "https://www.youtube.com/watch?v=$2")
    notify-send -i "$3" -t 4000 "$1" "$title"

}

# 1st argument switch [clean|newest]
time_selection(){
    sel_type=$1
    shift

    # make sure folder exists
    tmp_thumbnails="/tmp/tmp_thumbnails_$sel_type"
    mkdir -p $tmp_thumbnails

    # set find flags
    flag="-mtime"
    argument=+$1
    [[ $sel_type == "newest" ]] \
        && flag="-mmin" \
        && argument="-$1"

    # move all older than N days into the directory
    find $THUMBNAILS \
        $flag $argument \
        -type f \
        -exec mv -t $tmp_thumbnails {} +

    # perform sxiv selection
    if [[ $sel_type == "newest" ]]; then
        play $tmp_thumbnails
    else
        chosen=$(sxiv -tbo $tmp_thumbnails || notify-send -i 'none' -t 2000 "Subtube" "No video deleted")
        [[ ! -z $chosen ]] && rm $chosen
    fi

    # move rest back
    mv $tmp_thumbnails/* $THUMBNAILS 2> /dev/null

    # remove empty folder
    rmdir $tmp_thumbnails
}

get_thumbnail(){
    wget -cq "https://i3.ytimg.com/vi/$1/hqdefault.jpg" -O $THUMBNAILS/$1.jpg
}

progress_bar(){
    if [[ $1 == '-d' ]]; then
        mkfifo $fifo
        chmod 766 $fifo
        subcount=$(cat $SUBSCRIBES | wc -l)
        tail -f $fifo | wob -t 5000 -a bottom -m $subcount &> /dev/null &
        progressbar_pid=$!
    elif [[ $1 == '-k' ]]; then
        rm $fifo
        kill $progressbar_pid
        pkill -f "tail -f $fifo"
    else
        echo $1 > $fifo
    fi
}

if [[ $1 == 'update' ]]; then
    arg=""
    if [[ $2 == "-s" ]] || [[ $2 == "--secret" ]]; then
        arg="secret"
    fi
    update $arg
elif [[ $1 == 'init' ]]; then
    update init
elif [[ $1 == 'play' ]]; then
    arg=""
    if [[ $2 == "-b" ]] || [[ $2 == "--browser" ]]; then
        arg="browser"
    fi
    play "" $arg
elif [[ $1 == 'clean' ]]; then
    [ $# -lt 2 ] \
        && echo "Pass number that specifies how many days" \
        "old videos to keep (delete older)" \
        && exit 1
    time_selection clean $2
elif [[ $1 == 'newest' ]]; then
    [ $# -lt 2 ] \
        && echo "Pass number that specifies how many minutes" \
        "old videos to show (for playing)" \
        && exit 1
    time_selection newest $2
elif [[ $1 == 'add' ]]; then
    [ $# -lt 2 ] \
        && echo "Pass url to videos page!" \
        && exit 1
    add_subscriber $2
elif [[ $1 == 'name' ]]; then
    [ $# -lt 2 ] \
        && echo "Pass path to file with video id!" \
        && exit 1
    metadata name $2
elif [[ $1 == 'name_length' ]]; then
    [ $# -lt 2 ] \
        && echo "Pass path to file with video id!" \
        && exit 1
    metadata name_length $2
else
    echo "Usage: subtube [OPTION]"
    echo "Youtube interface without browser"
    echo ""
    echo "Options:"
    echo "  -h, --help                 show this message and quit"
    echo "  update                     update database"
    echo "    --secret                 update database without notifications (for crontab)"
    echo "    -s                       alias --secret"
    echo "  play                       sxiv picking dialog for playing all marked videos"
    echo '    --browser                play with your browser instead (guess or use $BROWSER)'
    echo "    -b                       alias --browser"
    echo "  init                       dont download thumbnails - for first time"
    echo "  name path_to_file          notify-send video title"
    echo "  name_length path_to_file   notify-send video title (with length)"
    echo "  clean N                    select videos older than N days to delete"
    echo "  newest N                   select videos more recent than N minutes to choose from"
    echo "  add \$url                  add subscriber (video page url of youtube channel)"
fi
